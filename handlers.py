from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import Dispatcher
from keyboards import reply_keyboard, menu_categories_keyboard
from menu_loader import MenuLoader
from config import TOKEN
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


bot = Bot(token=TOKEN)
menu_loader = MenuLoader("tary_menu2.json")

# Store user orders
user_orders = {}
user_order_total = {}

async def start(message: Message):
    text = ("\"Tary\" –∞—Å—Ö–∞–Ω–∞—Å—ã–Ω—ã“£ –æ–Ω–ª–∞–π–Ω-–¥–∞—è—à—ã—Å—ã–Ω “õ–∞—Ä—Å—ã –∞–ª—ã“£—ã–∑! üçΩÔ∏è\n"
            "–ú–µ–Ω ‚Äì Tary Telegram-–±–æ—Ç—ã–º—ã–Ω, —Å—ñ–∑–¥—ñ“£ –∂–µ–∫–µ –¥–∞—è—à—ã“£—ã–∑–±—ã–Ω. –ú”ô–∑—ñ—Ä–¥—ñ “õ–∞—Ä–∞–ø, —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä—ñ–ø, "
            "—Å“Ø–π—ñ–∫—Ç—ñ —Ç–∞“ì–∞–º–¥–∞—Ä—ã“£—ã–∑–¥—ã —Ç–µ–∑ ”ô—Ä—ñ —ã“£“ì–∞–π–ª—ã —Ç“Ø—Ä–¥–µ –∞–ª–∞ –∞–ª–∞—Å—ã–∑! üòã\n\n"
            "–°—ñ–∑–≥–µ “õ–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω? üòä")
    await message.answer(text, reply_markup=reply_keyboard)

async def handle_menu_buttons(message: Message):
    user_id = message.from_user.id
    if message.text == "üìú View menu":
        await message.answer("üìú –ú”ô–∑—ñ—Ä —Å–∞–Ω–∞—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=menu_categories_keyboard())
    elif message.text == "üõí My cart":
        if user_id not in user_orders or not user_orders[user_id]:
            await message.answer("–°—ñ–∑–¥—ñ“£ —Å–µ–±–µ—Ç—ñ“£—ñ–∑ –±–æ—Å!")
        else:
            order_text = "\n".join(user_orders[user_id])
            total_price = user_order_total.get(user_id, 0)
            await message.answer(f"üõç –°—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑:\n{order_text}\n\nüí∞ –ñ–∞–ª–ø—ã –±–∞“ì–∞: {total_price} KZT")
    elif message.text == "üìû Contacts":
        await message.answer("–ë“±–ª –±”©–ª—ñ–º ”ô–∑—ñ—Ä–≥–µ –¥–∞–π—ã–Ω –µ–º–µ—Å. –ñ–∞“õ—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã! üõ†")

async def show_items(callback: CallbackQuery):
    category = callback.data
    items = menu_loader.get_items(category)
    if not items:
        await callback.message.answer("–ë“±–ª —Å–∞–Ω–∞—Ç—Ç–∞ —Ç–∞“ì–∞–º–¥–∞—Ä –∂–æ“õ!")
        return

    for item in items:
        text = f"üçΩ {item['name']}\nüí∞ {item['price_kzt']} KZT"
        if "description" in item:
            text += f"\nüìñ {item['description']}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï Add to cart", callback_data=f"add_{item['name']}")]
        ])

        if "image_url" in item:
            await bot.send_photo(callback.message.chat.id, photo=item["image_url"], caption=text, reply_markup=keyboard)
        else:
            await callback.message.answer(text, reply_markup=keyboard)

async def add_to_cart(callback: CallbackQuery):
    item_name = callback.data.split("add_", 1)[1]
    user_id = callback.from_user.id

    if user_id not in user_orders:
        user_orders[user_id] = []
        user_order_total[user_id] = 0

    user_orders[user_id].append(item_name)
    user_order_total[user_id] += menu_loader.get_price(item_name)

    await callback.answer(f"{item_name} —Å–µ–±–µ—Ç–∫–µ “õ–æ—Å—ã–ª–¥—ã!")

def register_handlers(dp: Dispatcher):
    dp.message.register(start, Command("start"))
    dp.message.register(handle_menu_buttons)
    dp.callback_query.register(show_items, lambda c: c.data in menu_loader.get_categories())
    dp.callback_query.register(add_to_cart, lambda c: c.data.startswith("add_"))
